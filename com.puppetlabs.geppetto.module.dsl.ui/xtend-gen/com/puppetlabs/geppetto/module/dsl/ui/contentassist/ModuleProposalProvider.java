/**
 * generated by Xtext
 */
package com.puppetlabs.geppetto.module.dsl.ui.contentassist;

import com.google.common.base.Objects;
import com.google.common.base.Predicate;
import com.google.inject.Inject;
import com.puppetlabs.geppetto.module.dsl.ModuleUtil;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonDependency;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonMetadata;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonObject;
import com.puppetlabs.geppetto.module.dsl.ui.contentassist.AbstractModuleProposalProvider;
import com.puppetlabs.geppetto.semver.Version;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("all")
public class ModuleProposalProvider extends AbstractModuleProposalProvider {
  @Inject
  private IQualifiedNameProvider qnProvider;
  
  @Inject
  @Extension
  private ModuleUtil _moduleUtil;
  
  /**
   * Avoid proposing ':' when current is whitespace that comes after it
   */
  public void completeKeyword(final Keyword keyword, final ContentAssistContext contentAssistContext, final ICompletionProposalAcceptor acceptor) {
    final INode currentNode = contentAssistContext.getCurrentNode();
    if ((currentNode instanceof ILeafNode)) {
      boolean _and = false;
      boolean _isHidden = ((ILeafNode)currentNode).isHidden();
      if (!_isHidden) {
        _and = false;
      } else {
        String _value = keyword.getValue();
        boolean _equals = Objects.equal(_value, ":");
        _and = _equals;
      }
      if (_and) {
        return;
      }
    }
    super.completeKeyword(keyword, contentAssistContext, acceptor);
  }
  
  /**
   * Avoid including the module itself when proposing dependency alternatives
   */
  public void completeMetadataRefPair_Ref(final EObject m, final Assignment a, final ContentAssistContext ctx, final ICompletionProposalAcceptor acceptor) {
    EObject _rootModel = ctx.getRootModel();
    final QualifiedName qn = this.qnProvider.getFullyQualifiedName(_rootModel);
    AbstractElement _terminal = a.getTerminal();
    final Predicate<IEObjectDescription> _function = new Predicate<IEObjectDescription>() {
      public boolean apply(final IEObjectDescription d) {
        QualifiedName _qualifiedName = d.getQualifiedName();
        return (!Objects.equal(_qualifiedName, qn));
      }
    };
    this.lookupCrossReference(((CrossReference) _terminal), ctx, acceptor, _function);
  }
  
  public void completeRequirementNameValue_Value(final EObject m, final Assignment a, final ContentAssistContext ctx, final ICompletionProposalAcceptor acceptor) {
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal("\"pe\"", ctx);
    acceptor.accept(_createCompletionProposal);
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal("\"puppet\"", ctx);
    acceptor.accept(_createCompletionProposal_1);
  }
  
  public void completeJsonVersionRange_Value(final EObject model, final Assignment assignment, final ContentAssistContext ctx, final ICompletionProposalAcceptor acceptor) {
    final EObject rq = model.eContainer();
    Version _xifexpression = null;
    if ((rq instanceof JsonDependency)) {
      Version _xifexpression_1 = null;
      boolean _isResolved = this._moduleUtil.isResolved(rq);
      if (_isResolved) {
        JsonMetadata _referencedModule = this._moduleUtil.getReferencedModule(((JsonDependency)rq));
        _xifexpression_1 = this._moduleUtil.getVersion(_referencedModule);
      } else {
        _xifexpression_1 = Version.create("0.1.0");
      }
      _xifexpression = _xifexpression_1;
    } else {
      Version _xifexpression_2 = null;
      if ((rq instanceof JsonObject)) {
        Version _xifexpression_3 = null;
        String _string = this._moduleUtil.getString(((JsonObject)rq), "name");
        boolean _equals = Objects.equal(_string, "puppet");
        if (_equals) {
          _xifexpression_3 = Version.create("3.6.0");
        } else {
          _xifexpression_3 = Version.create("3.0.0");
        }
        _xifexpression_2 = _xifexpression_3;
      } else {
        _xifexpression_2 = Version.create("0.1.0");
      }
      _xifexpression = _xifexpression_2;
    }
    final Version minVer = _xifexpression;
    final StringBuilder bld = new StringBuilder();
    bld.append("\">=");
    minVer.toString(bld);
    bld.append("\"");
    String _string_1 = bld.toString();
    ICompletionProposal _createCompletionProposal = this.createCompletionProposal(_string_1, ctx);
    acceptor.accept(_createCompletionProposal);
    bld.setLength(1);
    int _major = minVer.getMajor();
    bld.append(_major);
    bld.append(".x\"");
    String _string_2 = bld.toString();
    ICompletionProposal _createCompletionProposal_1 = this.createCompletionProposal(_string_2, ctx);
    acceptor.accept(_createCompletionProposal_1);
    bld.setLength(1);
    int _major_1 = minVer.getMajor();
    bld.append(_major_1);
    bld.append(".");
    int _minor = minVer.getMinor();
    bld.append(_minor);
    bld.append(".x\"");
    String _string_3 = bld.toString();
    ICompletionProposal _createCompletionProposal_2 = this.createCompletionProposal(_string_3, ctx);
    acceptor.accept(_createCompletionProposal_2);
    bld.setLength(1);
    minVer.toString(bld);
    bld.append("\"");
    String _string_4 = bld.toString();
    ICompletionProposal _createCompletionProposal_3 = this.createCompletionProposal(_string_4, ctx);
    acceptor.accept(_createCompletionProposal_3);
  }
}
