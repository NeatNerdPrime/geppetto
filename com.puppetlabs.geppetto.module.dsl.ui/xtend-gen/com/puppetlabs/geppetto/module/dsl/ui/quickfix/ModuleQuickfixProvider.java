/**
 * generated by Xtext
 */
package com.puppetlabs.geppetto.module.dsl.ui.quickfix;

import com.google.common.base.Objects;
import com.google.inject.Inject;
import com.puppetlabs.geppetto.forge.model.ModuleName;
import com.puppetlabs.geppetto.module.dsl.ModuleUtil;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonDependency;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonMetadata;
import com.puppetlabs.geppetto.module.dsl.ui.preferences.ModulePreferencesHelper;
import com.puppetlabs.geppetto.module.dsl.ui.quickfix.NewWithKeyword;
import com.puppetlabs.geppetto.module.dsl.validation.ModuleDiagnostics;
import com.puppetlabs.geppetto.semver.Version;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.inject.Singleton;
import org.eclipse.core.resources.IContainer;
import org.eclipse.core.resources.IFile;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.wizard.WizardDialog;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.IWorkbench;
import org.eclipse.ui.IWorkbenchWindow;
import org.eclipse.ui.IWorkbenchWizard;
import org.eclipse.ui.wizards.IWizardDescriptor;
import org.eclipse.ui.wizards.IWizardRegistry;
import org.eclipse.xtext.ui.editor.model.IXtextDocument;
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext;
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Custom quickfixes.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#quickfixes
 */
@Singleton
@SuppressWarnings("all")
public class ModuleQuickfixProvider extends DefaultQuickfixProvider {
  @Inject
  @Extension
  private ModuleUtil _moduleUtil;
  
  @Inject
  private ModulePreferencesHelper preferenceHelper;
  
  @Inject
  private IWorkbench workbench;
  
  private Pattern REF_PATTERN = Pattern.compile("reference to Module \'([^\']+)\'\\.");
  
  private Version getResolvedMetadataVersion(final EObject element) {
    EObject _eContainer = element.eContainer();
    EObject _eContainer_1 = _eContainer.eContainer();
    JsonMetadata _referencedModule = this._moduleUtil.getReferencedModule(((JsonDependency) _eContainer_1));
    return this._moduleUtil.getVersion(_referencedModule);
  }
  
  public String getModuleOwner() {
    String _xblockexpression = null;
    {
      String moduleOwner = this.preferenceHelper.getForgeLogin();
      boolean _tripleEquals = (moduleOwner == null);
      if (_tripleEquals) {
        String _property = System.getProperty("user.name");
        String _safeOwner = ModuleName.safeOwner(_property);
        moduleOwner = _safeOwner;
      }
      _xblockexpression = moduleOwner;
    }
    return _xblockexpression;
  }
  
  public void createLinkingIssueResolutions(final Issue issue, final IssueResolutionAcceptor acceptor) {
    super.createLinkingIssueResolutions(issue, acceptor);
    String _message = issue.getMessage();
    final Matcher m = this.REF_PATTERN.matcher(_message);
    boolean _find = m.find();
    if (_find) {
      final String key = m.group(1);
      final ISemanticModification _function = new ISemanticModification() {
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          IWizardRegistry _importWizardRegistry = ModuleQuickfixProvider.this.workbench.getImportWizardRegistry();
          final IWizardDescriptor descriptor = _importWizardRegistry.findWizard(
            "com.puppetlabs.geppetto.ui.ImportPuppetModuleFromForgeWizard");
          final IWorkbenchWizard wizard = descriptor.createWizard();
          IWorkbenchWindow _activeWorkbenchWindow = ModuleQuickfixProvider.this.workbench.getActiveWorkbenchWindow();
          Shell _shell = _activeWorkbenchWindow.getShell();
          final WizardDialog wd = new WizardDialog(_shell, wizard);
          ((NewWithKeyword) wizard).startWithKeyword(key);
          String _windowTitle = wizard.getWindowTitle();
          wd.setTitle(_windowTitle);
          wd.open();
        }
      };
      acceptor.accept(issue, (("Import " + key) + " from Puppet Forge"), 
        (("Import the missing " + key) + " module from the Puppet Forge repository"), null, _function);
      final ISemanticModification _function_1 = new ISemanticModification() {
        public void apply(final EObject element, final IModificationContext context) throws Exception {
          IWizardRegistry _importWizardRegistry = ModuleQuickfixProvider.this.workbench.getImportWizardRegistry();
          final IWizardDescriptor descriptor = _importWizardRegistry.findWizard(
            "com.puppetlabs.geppetto.ui.ImportPuppetModuleFromSourceWizard");
          final IWorkbenchWizard wizard = descriptor.createWizard();
          IWorkbenchWindow _activeWorkbenchWindow = ModuleQuickfixProvider.this.workbench.getActiveWorkbenchWindow();
          Shell _shell = _activeWorkbenchWindow.getShell();
          final WizardDialog wd = new WizardDialog(_shell, wizard);
          String _windowTitle = wizard.getWindowTitle();
          wd.setTitle(_windowTitle);
          wd.open();
        }
      };
      acceptor.accept(issue, (("Import " + key) + " from local disk"), 
        (("Import the missing " + key) + " module from a local source folder"), null, _function_1);
    }
  }
  
  @Fix(ModuleDiagnostics.ISSUE__MISSING_REQUIRED_ATTRIBUTE)
  public void addMissingAttribute(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final String[] data = issue.getData();
    boolean _or = false;
    boolean _equals = Objects.equal(data, null);
    if (_equals) {
      _or = true;
    } else {
      int _length = data.length;
      boolean _equals_1 = (_length == 0);
      _or = _equals_1;
    }
    if (_or) {
      return;
    }
    final String key = data[0];
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final IXtextDocument doc = context.getXtextDocument();
        final StringBuilder bld = new StringBuilder();
        bld.append("\"");
        bld.append(key);
        bld.append("\": \"");
        context.getXtextDocument();
        boolean _matched = false;
        if (!_matched) {
          if (Objects.equal(key, "version")) {
            _matched=true;
            bld.append("0.1.0");
          }
        }
        if (!_matched) {
          if (Objects.equal(key, "version_requirement")) {
            _matched=true;
            bld.append(">=0.0.0");
          }
        }
        if (!_matched) {
          if (Objects.equal(key, "author")) {
            _matched=true;
            String _moduleOwner = ModuleQuickfixProvider.this.getModuleOwner();
            bld.append(_moduleOwner);
          }
        }
        if (!_matched) {
          if (Objects.equal(key, "name")) {
            _matched=true;
            if ((element instanceof JsonMetadata)) {
              String _moduleOwner_1 = ModuleQuickfixProvider.this.getModuleOwner();
              bld.append(_moduleOwner_1);
              bld.append("-");
              IFile _adapter = doc.<IFile>getAdapter(IFile.class);
              IContainer _parent = _adapter.getParent();
              String _name = _parent.getName();
              String _safeName = ModuleName.safeName(_name, false);
              bld.append(_safeName);
            }
          }
        }
        bld.append("\",\n  ");
        Integer _offset = issue.getOffset();
        String _string = bld.toString();
        doc.replace((_offset).intValue(), 0, _string);
      }
    };
    acceptor.accept(issue, (("Add entry for \"" + key) + "\""), 
      (("Add missing entry for attribute \"" + key) + "\"with template value"), null, _function);
  }
  
  @Fix(ModuleDiagnostics.ISSUE__MODULE_VERSION_RANGE_MISMATCH)
  public void selectMatchingRange(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final ISemanticModification _function = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final StringBuilder bld = new StringBuilder();
        bld.append("\">=");
        Version _resolvedMetadataVersion = ModuleQuickfixProvider.this.getResolvedMetadataVersion(element);
        _resolvedMetadataVersion.toString(bld);
        bld.append("\"");
        IXtextDocument _xtextDocument = context.getXtextDocument();
        Integer _offset = issue.getOffset();
        Integer _length = issue.getLength();
        String _string = bld.toString();
        _xtextDocument.replace((_offset).intValue(), (_length).intValue(), _string);
      }
    };
    acceptor.accept(issue, "Use matching >=n.n.n range", 
      "Change to a range that matches versions\ngreater or equal to the selected module", null, _function);
    final ISemanticModification _function_1 = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final StringBuilder bld = new StringBuilder();
        bld.append("\"");
        Version _resolvedMetadataVersion = ModuleQuickfixProvider.this.getResolvedMetadataVersion(element);
        int _major = _resolvedMetadataVersion.getMajor();
        bld.append(_major);
        bld.append(".x\"");
        IXtextDocument _xtextDocument = context.getXtextDocument();
        Integer _offset = issue.getOffset();
        Integer _length = issue.getLength();
        String _string = bld.toString();
        _xtextDocument.replace((_offset).intValue(), (_length).intValue(), _string);
      }
    };
    acceptor.accept(issue, "Use matching n.x range", 
      "Change to a range that matches versions\nwith the same major number as selected module", null, _function_1);
    final ISemanticModification _function_2 = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final Version v = ModuleQuickfixProvider.this.getResolvedMetadataVersion(element);
        final StringBuilder bld = new StringBuilder();
        bld.append("\"");
        int _major = v.getMajor();
        bld.append(_major);
        bld.append(".");
        int _minor = v.getMinor();
        bld.append(_minor);
        bld.append(".x\"");
        IXtextDocument _xtextDocument = context.getXtextDocument();
        Integer _offset = issue.getOffset();
        Integer _length = issue.getLength();
        String _string = bld.toString();
        _xtextDocument.replace((_offset).intValue(), (_length).intValue(), _string);
      }
    };
    acceptor.accept(issue, "Use matching n.n.x range", 
      "Change to a range that matches versions\nwith the same major and minor number as selected module", null, _function_2);
    final ISemanticModification _function_3 = new ISemanticModification() {
      public void apply(final EObject element, final IModificationContext context) throws Exception {
        final StringBuilder bld = new StringBuilder();
        bld.append("\"");
        Version _resolvedMetadataVersion = ModuleQuickfixProvider.this.getResolvedMetadataVersion(element);
        _resolvedMetadataVersion.toString(bld);
        bld.append("\"");
        IXtextDocument _xtextDocument = context.getXtextDocument();
        Integer _offset = issue.getOffset();
        Integer _length = issue.getLength();
        String _string = bld.toString();
        _xtextDocument.replace((_offset).intValue(), (_length).intValue(), _string);
      }
    };
    acceptor.accept(issue, "Use exact range", 
      "Change to a range exactly matches the version\nof the selected module", null, _function_3);
  }
}
