/*
* generated by Xtext
*/
package com.puppetlabs.geppetto.module.dsl.ui.outline

import com.google.inject.Inject
import com.puppetlabs.geppetto.forge.model.ModuleName
import com.puppetlabs.geppetto.module.dsl.ModuleUtil
import com.puppetlabs.geppetto.module.dsl.metadata.JsonArray
import com.puppetlabs.geppetto.module.dsl.metadata.JsonDependency
import com.puppetlabs.geppetto.module.dsl.metadata.JsonOS
import com.puppetlabs.geppetto.module.dsl.metadata.JsonRequirement
import com.puppetlabs.geppetto.module.dsl.metadata.Value
import org.eclipse.swt.graphics.Image
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode
import com.puppetlabs.geppetto.module.dsl.metadata.JsonObject

class ModuleOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject
	extension ModuleUtil

	def _createNode(IOutlineNode parentNode, JsonArray jsonArray) {
		createChildren(parentNode, jsonArray)
	}

	def _createNode(IOutlineNode parentNode, JsonObject jsonObject) {
		createChildren(parentNode, jsonObject)
	}

	def _createNode(IOutlineNode parentNode, JsonDependency dependency) {
		val bld = new StringBuilder
		val name = dependency.rawName
		if (name != null)
			try {
				ModuleName.create(name, false).toString(bld)
			} catch (IllegalArgumentException e) {
				bld.append(name)
			}

		val range = dependency.getString('version_requirement')
		if (range !== null) {
			bld.append(' ')
			bld.append(range)
		}
		new EObjectNode(dependency, parentNode, null as Image, bld.toString, true)
	}

	def _createNode(IOutlineNode parentNode, JsonRequirement requirement) {
		val bld = new StringBuilder
		val name = requirement.getString('name')
		if (name !== null)
			bld.append(name)
		val range = requirement.getString('version_requirement')
		if (range !== null) {
			bld.append(' ')
			bld.append(range)
		}
		new EObjectNode(requirement, parentNode, null as Image, bld.toString, true)
	}

	def private void appendSQuoted(StringBuilder bld, Value value) {
		bld.append("'")
		bld.append(value.string)
		bld.append("'")
	}

	def _createNode(IOutlineNode parentNode, JsonOS os) {
		val bld = new StringBuilder
		val name = os.getString('operatingsystem')
		if (name !== null)
			bld.append(name)
		val osSupport = os.getValue('operatingsystemrelease')
		if (osSupport instanceof JsonArray) {
			bld.append(' [')
			val iter = osSupport.value.iterator
			if(iter.hasNext) {
				bld.appendSQuoted(iter.next)
				while(iter.hasNext) {
					bld.append(', ')
					bld.appendSQuoted(iter.next)
				}
			}	
			bld.append(']')
		}
		new EObjectNode(os, parentNode, null as Image, bld.toString, true)
	}
}
