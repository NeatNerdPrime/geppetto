/**
 * generated by Xtext
 */
package com.puppetlabs.geppetto.module.dsl.ui.outline;

import java.util.Iterator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;

import com.google.inject.Inject;
import com.puppetlabs.geppetto.forge.model.ModuleName;
import com.puppetlabs.geppetto.module.dsl.ModuleUtil;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonArray;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonDependency;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonOS;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonObject;
import com.puppetlabs.geppetto.module.dsl.metadata.JsonRequirement;
import com.puppetlabs.geppetto.module.dsl.metadata.Value;

public class ModuleOutlineTreeProvider extends DefaultOutlineTreeProvider {
	@Inject
	private ModuleUtil moduleUtil;

	public void _createNode(IOutlineNode parentNode, JsonArray jsonArray) {
		createChildren(parentNode, jsonArray);
	}

	public EObjectNode _createNode(IOutlineNode parentNode, JsonDependency dependency) {
		StringBuilder bld = new StringBuilder();
		String name = moduleUtil.getRawName(dependency);
		if(name != null) {
			try {
				ModuleName.create(name, false).toString(bld);
			}
			catch(IllegalArgumentException e) {
				bld.append(name);
			}
		}
		String range = moduleUtil.getString(dependency, "version_requirement");
		if(range != null) {
			bld.append(" ");
			bld.append(range);
		}
		return new EObjectNode(dependency, parentNode, ((Image) null), bld.toString(), true);
	}

	public void _createNode(IOutlineNode parentNode, JsonObject jsonObject) {
		createChildren(parentNode, jsonObject);
	}

	public EObjectNode _createNode(IOutlineNode parentNode, JsonOS os) {
		StringBuilder bld = new StringBuilder();
		String name = moduleUtil.getString(os, "operatingsystem");
		if(name != null)
			bld.append(name);

		Value osSupport = moduleUtil.getValue(os, "operatingsystemrelease");
		if((osSupport instanceof JsonArray)) {
			bld.append(" [");
			EList<Value> _value = ((JsonArray) osSupport).getValue();
			Iterator<Value> iter = _value.iterator();
			if(iter.hasNext()) {
				appendSQuoted(bld, iter.next());
				while(iter.hasNext()) {
					bld.append(", ");
					appendSQuoted(bld, iter.next());
				}
			}
			bld.append("]");
		}
		return new EObjectNode(os, parentNode, (Image) null, bld.toString(), true);
	}

	public EObjectNode _createNode(IOutlineNode parentNode, JsonRequirement requirement) {
		StringBuilder bld = new StringBuilder();
		String name = moduleUtil.getString(requirement, "name");
		if(name != null)
			bld.append(name);

		String range = moduleUtil.getString(requirement, "version_requirement");
		if(range != null) {
			bld.append(" ");
			bld.append(range);
		}
		return new EObjectNode(requirement, parentNode, (Image) null, bld.toString(), true);
	}

	private void appendSQuoted(StringBuilder bld, Value value) {
		bld.append("\'");
		bld.append(moduleUtil.getString(value));
		bld.append("\'");
	}
}
