/*
 * generated by Xtext
 */
package com.puppetlabs.geppetto.module.dsl.ui.contentassist

import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.CrossReference
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.resource.IEObjectDescription
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.nodemodel.ILeafNode
import com.puppetlabs.geppetto.semver.Version
import com.puppetlabs.geppetto.module.dsl.metadata.JsonObject
import com.puppetlabs.geppetto.module.dsl.ModuleUtil
import com.puppetlabs.geppetto.module.dsl.metadata.JsonDependency

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class ModuleProposalProvider extends AbstractModuleProposalProvider {
	@Inject
	IQualifiedNameProvider qnProvider

	@Inject
	extension ModuleUtil

	/**
	 * Avoid proposing ':' when current is whitespace that comes after it 
	 */
	override completeKeyword(Keyword keyword, ContentAssistContext contentAssistContext, ICompletionProposalAcceptor acceptor) {
		val currentNode = contentAssistContext.currentNode
		if(currentNode instanceof ILeafNode)
			if(currentNode.hidden && keyword.value == ':')
				return;

		super.completeKeyword(keyword, contentAssistContext, acceptor)
	}

	/**
	 * Avoid including the module itself when proposing dependency alternatives
	 */
	override completeMetadataRefPair_Ref(EObject m, Assignment a, ContentAssistContext ctx, ICompletionProposalAcceptor acceptor) {
		val qn = qnProvider.getFullyQualifiedName(ctx.rootModel)
		lookupCrossReference(a.terminal as CrossReference, ctx, acceptor, [ IEObjectDescription d | d.qualifiedName != qn ])
	}

	override completeRequirementNameValue_Value(EObject m, Assignment a, ContentAssistContext ctx, ICompletionProposalAcceptor acceptor) {
		acceptor.accept(createCompletionProposal('"pe"', ctx))
		acceptor.accept(createCompletionProposal('"puppet"', ctx))
	}

	override completeJsonVersionRange_Value(EObject model, Assignment assignment, ContentAssistContext ctx, ICompletionProposalAcceptor acceptor) {
		val rq = model.eContainer
		val minVer = if(rq instanceof JsonDependency)
			if(rq.resolved)
				rq.referencedModule.version
			else
				Version.create('0.1.0')
		else if(rq instanceof JsonObject)
			if(rq.getString('name') == 'puppet')
				Version.create('3.6.0')
			else
				Version.create('3.0.0')
		else
			Version.create('0.1.0')

		val bld = new StringBuilder
		bld.append('">=')
		minVer.toString(bld)
		bld.append('"')
		acceptor.accept(createCompletionProposal(bld.toString, ctx))
		bld.length = 1
		bld.append(minVer.major)
		bld.append('.x"')
		acceptor.accept(createCompletionProposal(bld.toString, ctx))
		bld.length = 1
		bld.append(minVer.major)
		bld.append('.')
		bld.append(minVer.minor)
		bld.append('.x"')
		acceptor.accept(createCompletionProposal(bld.toString, ctx))
		bld.length = 1
		minVer.toString(bld)
		bld.append('"')
		acceptor.accept(createCompletionProposal(bld.toString, ctx))
	}
}
