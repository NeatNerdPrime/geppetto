module com.puppetlabs.geppetto.pp.dsl.generate

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "../com.puppetlabs.geppetto.pp.dsl/src/com/puppetlabs/geppetto/pp/dsl/PP.xtext"
var file.extensions = "pp"
var projectName = "com.puppetlabs.geppetto.pp.dsl"
var runtimeProject = "../${projectName}"
var puppetModelURI =   "platform:/plugin/com.puppetlabs.geppetto.pp/model"

Workflow {
    bean = StandaloneSetup {
    	registerGeneratedEPackage = "com.puppetlabs.geppetto.pp.PPPackage"
		platformUri = "${runtimeProject}/.."
		scanClassPath = true
//		registerGenModelFile = "${puppetModelURI}/PP.genmodel"
//		registerEcoreFile = "${puppetModelURI}/PP.ecore"
		registerGenModelFile = "../com.puppetlabs.geppetto.pp/model/PP.genmodel"
		registerEcoreFile = "../com.puppetlabs.geppetto.pp/model/PP.ecore"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
    	// We don't want the generator messing with our carefully tailored MANIFEST.MF files
 		// This might make manual merges necessary, see MANIFEST.MF_gen
		mergeManifest = false

		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		encoding = "UTF-8"
		
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// generates Java API for the generated EPackages 
			fragment = ecore.EcoreGeneratorFragment {
				
//			referencedGenModels = "uri to genmodel, uri to next genmodel"
			// referencedGenModels = "classpath:/model/PP.genmodel"
				skipGenerate = true // Puppet grammar does not have its own model
				// Puppet model
//				saveMapping = {
//        			from = "classpath:/model/PP.genmodel"
//        			to = "${puppetModelURI}/PP.genmodel"
//    			}
//				saveMapping = {
//					from = "classpath:/model/PP.ecore"
//					to = "${puppetModelURI}/PP.ecore"
//				}
			
			}

			// the serialization component
			fragment = serializer.SerializerFragment {} // 2.0 ->
//			fragment = parseTreeConstructor.ParseTreeConstructorFragment {} // 1.0 ->

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
//			fragment = parser.antlr.XtextAntlrGeneratorFragment {
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.rt.AntlrGeneratorFragment {

        	// get rid of pesky error(10): internal error: org.antlr.tool.Grammar.createLookaheadDFA(Grammar.java:864): could not even do k=1 for decision <n>
        	// caused by a timeout in antlr - default is 1000ms
        	antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			  options = {
					backtrack = true
//					backtrackLexer = true
				}
			}
			
			// Use externally specified lexer
			fragment = parser.antlr.ex.ExternalAntlrLexerFragment {
			    lexerGrammar = "com.puppetlabs.geppetto.pp.dsl.lexer.PPLexer"
			    runtime = true
			    antlrParam = "-lib"
			    antlrParam = "${runtimeProject}/src-gen/com/puppetlabs/geppetto/pp/dsl/parser/antlr/lexer"
			}
			
			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}			
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
//			fragment =  org.eclipse.xtext.generator.parser.antlr.XtextAntlrUiGeneratorFragment { // no lexer backtracking
			fragment = org.eclipse.xtext.generator.parser.antlr.ex.ca.ContentAssistParserGeneratorFragment	{
			// get rid of pesky error(10): internal error: org.antlr.tool.Grammar.createLookaheadDFA(Grammar.java:864): could not even do k=1 for decision <n>
        	// caused by a timeout in antlr - default is 1000ms
        	antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			
				options = {
					backtrack = true
//					classSplitting = true
//					backtrackLexer = true
				}
			}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }
		}
	}
}
