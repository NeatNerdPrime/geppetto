/**
 * Copyright (c) 2013 Puppet Labs, Inc. and other contributors, as listed below.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Puppet Labs
 *
 */
package com.puppetlabs.geppetto.pp.pptp.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.*;

import com.puppetlabs.geppetto.pp.pptp.util.PPTPAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * 
 * @generated
 */
public class PPTPItemProviderAdapterFactory extends PPTPAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.PuppetDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PuppetDistributionItemProvider puppetDistributionItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.TypeFragment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypeFragmentItemProvider typeFragmentItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.Type} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypeItemProvider typeItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.MetaType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MetaTypeItemProvider metaTypeItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.NameSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NameSpaceItemProvider nameSpaceItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.TPVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TPVariableItemProvider tpVariableItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.MetaVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected MetaVariableItemProvider metaVariableItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.PuppetType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PuppetTypeItemProvider puppetTypeItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.PuppetTypeParameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected PuppetTypeParameterItemProvider puppetTypeParameterItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.StringValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected StringValueItemProvider stringValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.TypeReferenceValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypeReferenceValueItemProvider typeReferenceValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.FloatValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected FloatValueItemProvider floatValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.IntegerValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected IntegerValueItemProvider integerValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.TypeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected TypeValueItemProvider typeValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.RegexpValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected RegexpValueItemProvider regexpValueItemProvider;

	/**
	 * This keeps track of the one adapter used for all {@link com.puppetlabs.geppetto.pp.pptp.NamedTypeValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	protected NamedTypeValueItemProvider namedTypeValueItemProvider;

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	public PPTPItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if(isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if(!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.FloatValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createFloatValueAdapter() {
		if(floatValueItemProvider == null) {
			floatValueItemProvider = new FloatValueItemProvider(this);
		}

		return floatValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if(functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.IntegerValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueAdapter() {
		if(integerValueItemProvider == null) {
			integerValueItemProvider = new IntegerValueItemProvider(this);
		}

		return integerValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.MetaType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMetaTypeAdapter() {
		if(metaTypeItemProvider == null) {
			metaTypeItemProvider = new MetaTypeItemProvider(this);
		}

		return metaTypeItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.MetaVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createMetaVariableAdapter() {
		if(metaVariableItemProvider == null) {
			metaVariableItemProvider = new MetaVariableItemProvider(this);
		}

		return metaVariableItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.NamedTypeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNamedTypeValueAdapter() {
		if(namedTypeValueItemProvider == null) {
			namedTypeValueItemProvider = new NamedTypeValueItemProvider(this);
		}

		return namedTypeValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.NameSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createNameSpaceAdapter() {
		if(nameSpaceItemProvider == null) {
			nameSpaceItemProvider = new NameSpaceItemProvider(this);
		}

		return nameSpaceItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if(parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if(propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.PuppetDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPuppetDistributionAdapter() {
		if(puppetDistributionItemProvider == null) {
			puppetDistributionItemProvider = new PuppetDistributionItemProvider(this);
		}

		return puppetDistributionItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.PuppetType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPuppetTypeAdapter() {
		if(puppetTypeItemProvider == null) {
			puppetTypeItemProvider = new PuppetTypeItemProvider(this);
		}

		return puppetTypeItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.PuppetTypeParameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createPuppetTypeParameterAdapter() {
		if(puppetTypeParameterItemProvider == null) {
			puppetTypeParameterItemProvider = new PuppetTypeParameterItemProvider(this);
		}

		return puppetTypeParameterItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.RegexpValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createRegexpValueAdapter() {
		if(regexpValueItemProvider == null) {
			regexpValueItemProvider = new RegexpValueItemProvider(this);
		}

		return regexpValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.StringValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createStringValueAdapter() {
		if(stringValueItemProvider == null) {
			stringValueItemProvider = new StringValueItemProvider(this);
		}

		return stringValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.TPVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTPVariableAdapter() {
		if(tpVariableItemProvider == null) {
			tpVariableItemProvider = new TPVariableItemProvider(this);
		}

		return tpVariableItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.Type}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypeAdapter() {
		if(typeItemProvider == null) {
			typeItemProvider = new TypeItemProvider(this);
		}

		return typeItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.TypeFragment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypeFragmentAdapter() {
		if(typeFragmentItemProvider == null) {
			typeFragmentItemProvider = new TypeFragmentItemProvider(this);
		}

		return typeFragmentItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.TypeReferenceValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypeReferenceValueAdapter() {
		if(typeReferenceValueItemProvider == null) {
			typeReferenceValueItemProvider = new TypeReferenceValueItemProvider(this);
		}

		return typeReferenceValueItemProvider;
	}

	/**
	 * This creates an adapter for a {@link com.puppetlabs.geppetto.pp.pptp.TypeValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public Adapter createTypeValueAdapter() {
		if(typeValueItemProvider == null) {
			typeValueItemProvider = new TypeValueItemProvider(this);
		}

		return typeValueItemProvider;
	}

	/**
	 * This disposes all of the item providers created by this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void dispose() {
		if(puppetDistributionItemProvider != null)
			puppetDistributionItemProvider.dispose();
		if(functionItemProvider != null)
			functionItemProvider.dispose();
		if(propertyItemProvider != null)
			propertyItemProvider.dispose();
		if(parameterItemProvider != null)
			parameterItemProvider.dispose();
		if(typeFragmentItemProvider != null)
			typeFragmentItemProvider.dispose();
		if(typeItemProvider != null)
			typeItemProvider.dispose();
		if(metaTypeItemProvider != null)
			metaTypeItemProvider.dispose();
		if(nameSpaceItemProvider != null)
			nameSpaceItemProvider.dispose();
		if(tpVariableItemProvider != null)
			tpVariableItemProvider.dispose();
		if(metaVariableItemProvider != null)
			metaVariableItemProvider.dispose();
		if(puppetTypeItemProvider != null)
			puppetTypeItemProvider.dispose();
		if(puppetTypeParameterItemProvider != null)
			puppetTypeParameterItemProvider.dispose();
		if(stringValueItemProvider != null)
			stringValueItemProvider.dispose();
		if(typeReferenceValueItemProvider != null)
			typeReferenceValueItemProvider.dispose();
		if(floatValueItemProvider != null)
			floatValueItemProvider.dispose();
		if(integerValueItemProvider != null)
			integerValueItemProvider.dispose();
		if(typeValueItemProvider != null)
			typeValueItemProvider.dispose();
		if(regexpValueItemProvider != null)
			regexpValueItemProvider.dispose();
		if(namedTypeValueItemProvider != null)
			namedTypeValueItemProvider.dispose();
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if(parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null
			? this
			: parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * 
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

}
