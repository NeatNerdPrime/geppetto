/**
 * generated by Xtext
 */
package com.puppetlabs.geppetto.module.dsl.formatting;

import java.util.List;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter;
import org.eclipse.xtext.formatting.impl.FormattingConfig;
import org.eclipse.xtext.util.Pair;

@SuppressWarnings("all")
public class ModuleFormatter extends AbstractDeclarativeFormatter {
  protected void configureFormatting(final FormattingConfig c) {
    List<Pair<Keyword, Keyword>> _findKeywordPairs = this.grammar.findKeywordPairs("{", "}");
    for (final Pair<Keyword, Keyword> pair : _findKeywordPairs) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        Keyword _first = pair.getFirst();
        _setNoSpace.before(_first);
        FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(1);
        Keyword _first_1 = pair.getFirst();
        _setLinewrap.after(_first_1);
        Keyword _first_2 = pair.getFirst();
        Keyword _second = pair.getSecond();
        c.setIndentation(_first_2, _second);
        FormattingConfig.LinewrapLocator _setLinewrap_1 = c.setLinewrap(1);
        Keyword _second_1 = pair.getSecond();
        _setLinewrap_1.before(_second_1);
        FormattingConfig.LinewrapLocator _setLinewrap_2 = c.setLinewrap(1);
        Keyword _second_2 = pair.getSecond();
        _setLinewrap_2.after(_second_2);
        FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
        Keyword _first_3 = pair.getFirst();
        Keyword _second_3 = pair.getSecond();
        _setNoSpace_1.between(_first_3, _second_3);
      }
    }
    List<Pair<Keyword, Keyword>> _findKeywordPairs_1 = this.grammar.findKeywordPairs("[", "]");
    for (final Pair<Keyword, Keyword> pair_1 : _findKeywordPairs_1) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        Keyword _first = pair_1.getFirst();
        _setNoSpace.before(_first);
        Keyword _first_1 = pair_1.getFirst();
        Keyword _second = pair_1.getSecond();
        c.setIndentation(_first_1, _second);
        FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(1);
        Keyword _second_1 = pair_1.getSecond();
        _setLinewrap.before(_second_1);
        FormattingConfig.NoSpaceLocator _setNoSpace_1 = c.setNoSpace();
        Keyword _first_2 = pair_1.getFirst();
        Keyword _second_2 = pair_1.getSecond();
        _setNoSpace_1.between(_first_2, _second_2);
      }
    }
    List<Keyword> _findKeywords = this.grammar.findKeywords(":");
    for (final Keyword colon : _findKeywords) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        _setNoSpace.before(colon);
        FormattingConfig.SpaceLocator _setSpace = c.setSpace(" ");
        _setSpace.after(colon);
      }
    }
    List<Keyword> _findKeywords_1 = this.grammar.findKeywords(",");
    for (final Keyword comma : _findKeywords_1) {
      {
        FormattingConfig.NoSpaceLocator _setNoSpace = c.setNoSpace();
        _setNoSpace.before(comma);
        FormattingConfig.LinewrapLocator _setLinewrap = c.setLinewrap(1);
        _setLinewrap.after(comma);
      }
    }
  }
}
