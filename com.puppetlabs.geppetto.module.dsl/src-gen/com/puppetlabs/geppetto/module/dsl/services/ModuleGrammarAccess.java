/*
* generated by Xtext
*/
package com.puppetlabs.geppetto.module.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class ModuleGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cJsonMetadataParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Model returns JsonObject:
		//	JsonMetadata;
		public ParserRule getRule() { return rule; }

		//JsonMetadata
		public RuleCall getJsonMetadataParserRuleCall() { return cJsonMetadataParserRuleCall; }
	}

	public class JsonMetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonMetadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsMetadataPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsMetadataPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonMetadata:
		//	"{" pairs+=MetadataPair ("," pairs+=MetadataPair)* "}";
		public ParserRule getRule() { return rule; }

		//"{" pairs+=MetadataPair ("," pairs+=MetadataPair)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//pairs+=MetadataPair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//MetadataPair
		public RuleCall getPairsMetadataPairParserRuleCall_1_0() { return cPairsMetadataPairParserRuleCall_1_0; }

		//("," pairs+=MetadataPair)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//pairs+=MetadataPair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//MetadataPair
		public RuleCall getPairsMetadataPairParserRuleCall_2_1_0() { return cPairsMetadataPairParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class JsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPairsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPairsPairParserRuleCall_2_0_0 = (RuleCall)cPairsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPairsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_2_1_1_0 = (RuleCall)cPairsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonObject:
		//	{JsonObject} "{" (pairs+=Pair ("," pairs+=Pair)*)? "}";
		public ParserRule getRule() { return rule; }

		//{JsonObject} "{" (pairs+=Pair ("," pairs+=Pair)*)? "}"
		public Group getGroup() { return cGroup; }

		//{JsonObject}
		public Action getJsonObjectAction_0() { return cJsonObjectAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(pairs+=Pair ("," pairs+=Pair)*)?
		public Group getGroup_2() { return cGroup_2; }

		//pairs+=Pair
		public Assignment getPairsAssignment_2_0() { return cPairsAssignment_2_0; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_2_0_0() { return cPairsPairParserRuleCall_2_0_0; }

		//("," pairs+=Pair)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_2_1_1() { return cPairsAssignment_2_1_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_2_1_1_0() { return cPairsPairParserRuleCall_2_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MetadataPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataPair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAuthorPairParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDependenciesPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDescriptionPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLicensePairParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNamePairParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cProjectPagePairParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSourcePairParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSummaryPairParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cRequirementsPairParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOperatingsystemSupportPairParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cTagsPairParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cVersionPairParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cUnrecognizedMetadataPairParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//MetadataPair returns Pair:
		//	AuthorPair | DependenciesPair | DescriptionPair | LicensePair | NamePair | ProjectPagePair | SourcePair | SummaryPair
		//	| RequirementsPair | OperatingsystemSupportPair | TagsPair | VersionPair | UnrecognizedMetadataPair;
		public ParserRule getRule() { return rule; }

		//AuthorPair | DependenciesPair | DescriptionPair | LicensePair | NamePair | ProjectPagePair | SourcePair | SummaryPair |
		//RequirementsPair | OperatingsystemSupportPair | TagsPair | VersionPair | UnrecognizedMetadataPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//AuthorPair
		public RuleCall getAuthorPairParserRuleCall_0() { return cAuthorPairParserRuleCall_0; }

		//DependenciesPair
		public RuleCall getDependenciesPairParserRuleCall_1() { return cDependenciesPairParserRuleCall_1; }

		//DescriptionPair
		public RuleCall getDescriptionPairParserRuleCall_2() { return cDescriptionPairParserRuleCall_2; }

		//LicensePair
		public RuleCall getLicensePairParserRuleCall_3() { return cLicensePairParserRuleCall_3; }

		//NamePair
		public RuleCall getNamePairParserRuleCall_4() { return cNamePairParserRuleCall_4; }

		//ProjectPagePair
		public RuleCall getProjectPagePairParserRuleCall_5() { return cProjectPagePairParserRuleCall_5; }

		//SourcePair
		public RuleCall getSourcePairParserRuleCall_6() { return cSourcePairParserRuleCall_6; }

		//SummaryPair
		public RuleCall getSummaryPairParserRuleCall_7() { return cSummaryPairParserRuleCall_7; }

		//RequirementsPair
		public RuleCall getRequirementsPairParserRuleCall_8() { return cRequirementsPairParserRuleCall_8; }

		//OperatingsystemSupportPair
		public RuleCall getOperatingsystemSupportPairParserRuleCall_9() { return cOperatingsystemSupportPairParserRuleCall_9; }

		//TagsPair
		public RuleCall getTagsPairParserRuleCall_10() { return cTagsPairParserRuleCall_10; }

		//VersionPair
		public RuleCall getVersionPairParserRuleCall_11() { return cVersionPairParserRuleCall_11; }

		//UnrecognizedMetadataPair
		public RuleCall getUnrecognizedMetadataPairParserRuleCall_12() { return cUnrecognizedMetadataPairParserRuleCall_12; }
	}

	public class AuthorPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AuthorPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameAuthorKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//AuthorPair returns Pair:
		//	name="\"author\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"author\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"author\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"author\""
		public Keyword getNameAuthorKeyword_0_0() { return cNameAuthorKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class DependenciesPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependenciesPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDependenciesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueDependencyArrayParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DependenciesPair returns Pair:
		//	name="\"dependencies\"" ":" value=DependencyArray;
		public ParserRule getRule() { return rule; }

		//name="\"dependencies\"" ":" value=DependencyArray
		public Group getGroup() { return cGroup; }

		//name="\"dependencies\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"dependencies\""
		public Keyword getNameDependenciesKeyword_0_0() { return cNameDependenciesKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=DependencyArray
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//DependencyArray
		public RuleCall getValueDependencyArrayParserRuleCall_2_0() { return cValueDependencyArrayParserRuleCall_2_0; }
	}

	public class DescriptionPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DescriptionPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameDescriptionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DescriptionPair returns Pair:
		//	name="\"description\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"description\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"description\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"description\""
		public Keyword getNameDescriptionKeyword_0_0() { return cNameDescriptionKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class LicensePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LicensePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameLicenseKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//LicensePair returns Pair:
		//	name="\"license\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"license\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"license\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"license\""
		public Keyword getNameLicenseKeyword_0_0() { return cNameLicenseKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class NamePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NamePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameNameKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueModuleNameParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NamePair returns Pair:
		//	name="\"name\"" ":" value=ModuleName;
		public ParserRule getRule() { return rule; }

		//name="\"name\"" ":" value=ModuleName
		public Group getGroup() { return cGroup; }

		//name="\"name\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"name\""
		public Keyword getNameNameKeyword_0_0() { return cNameNameKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=ModuleName
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//ModuleName
		public RuleCall getValueModuleNameParserRuleCall_2_0() { return cValueModuleNameParserRuleCall_2_0; }
	}

	public class OperatingsystemSupportPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OperatingsystemSupportPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameOperatingsystem_supportKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueOSArrayParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//OperatingsystemSupportPair returns Pair:
		//	name="\"operatingsystem_support\"" ":" value=OSArray;
		public ParserRule getRule() { return rule; }

		//name="\"operatingsystem_support\"" ":" value=OSArray
		public Group getGroup() { return cGroup; }

		//name="\"operatingsystem_support\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"operatingsystem_support\""
		public Keyword getNameOperatingsystem_supportKeyword_0_0() { return cNameOperatingsystem_supportKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=OSArray
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//OSArray
		public RuleCall getValueOSArrayParserRuleCall_2_0() { return cValueOSArrayParserRuleCall_2_0; }
	}

	public class ProjectPagePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProjectPagePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameProject_pageKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ProjectPagePair returns Pair:
		//	name="\"project_page\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"project_page\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"project_page\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"project_page\""
		public Keyword getNameProject_pageKeyword_0_0() { return cNameProject_pageKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class RequirementsPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementsPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRequirementsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueRequirementArrayParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//RequirementsPair returns Pair:
		//	name="\"requirements\"" ":" value=RequirementArray;
		public ParserRule getRule() { return rule; }

		//name="\"requirements\"" ":" value=RequirementArray
		public Group getGroup() { return cGroup; }

		//name="\"requirements\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"requirements\""
		public Keyword getNameRequirementsKeyword_0_0() { return cNameRequirementsKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=RequirementArray
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//RequirementArray
		public RuleCall getValueRequirementArrayParserRuleCall_2_0() { return cValueRequirementArrayParserRuleCall_2_0; }
	}

	public class SourcePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SourcePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSourceKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SourcePair returns Pair:
		//	name="\"source\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"source\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"source\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"source\""
		public Keyword getNameSourceKeyword_0_0() { return cNameSourceKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class SummaryPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SummaryPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameSummaryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//SummaryPair returns Pair:
		//	name="\"summary\"" ":" value=StringLiteral;
		public ParserRule getRule() { return rule; }

		//name="\"summary\"" ":" value=StringLiteral
		public Group getGroup() { return cGroup; }

		//name="\"summary\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"summary\""
		public Keyword getNameSummaryKeyword_0_0() { return cNameSummaryKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0() { return cValueStringLiteralParserRuleCall_2_0; }
	}

	public class TagsPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagsPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameTagsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueTagArrayParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TagsPair returns Pair:
		//	name="\"tags\"" ":" value=TagArray;
		public ParserRule getRule() { return rule; }

		//name="\"tags\"" ":" value=TagArray
		public Group getGroup() { return cGroup; }

		//name="\"tags\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"tags\""
		public Keyword getNameTagsKeyword_0_0() { return cNameTagsKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=TagArray
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//TagArray
		public RuleCall getValueTagArrayParserRuleCall_2_0() { return cValueTagArrayParserRuleCall_2_0; }
	}

	public class VersionPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameVersionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVersionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VersionPair returns Pair:
		//	name="\"version\"" ":" value=Version;
		public ParserRule getRule() { return rule; }

		//name="\"version\"" ":" value=Version
		public Group getGroup() { return cGroup; }

		//name="\"version\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"version\""
		public Keyword getNameVersionKeyword_0_0() { return cNameVersionKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Version
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Version
		public RuleCall getValueVersionParserRuleCall_2_0() { return cValueVersionParserRuleCall_2_0; }
	}

	public class UnrecognizedMetadataPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnrecognizedMetadataPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameSTRINGTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//UnrecognizedMetadataPair returns UnrecognizedPair:
		//	name=STRING ":" value=Value;
		public ParserRule getRule() { return rule; }

		//name=STRING ":" value=Value
		public Group getGroup() { return cGroup; }

		//name=STRING
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_0_0() { return cNameSTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class StringArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueStringLiteralParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueStringLiteralParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StringArray returns JsonArray:
		//	{JsonArray} "[" (value+=StringLiteral ("," value+=StringLiteral)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=StringLiteral ("," value+=StringLiteral)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=StringLiteral ("," value+=StringLiteral)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=StringLiteral
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_0_0() { return cValueStringLiteralParserRuleCall_2_0_0; }

		//("," value+=StringLiteral)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=StringLiteral
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_2_1_1_0() { return cValueStringLiteralParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class DependencyArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueDependencyObjectParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueDependencyObjectParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//DependencyArray returns JsonArray:
		//	{JsonArray} "[" (value+=DependencyObject ("," value+=DependencyObject)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=DependencyObject ("," value+=DependencyObject)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=DependencyObject ("," value+=DependencyObject)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=DependencyObject
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//DependencyObject
		public RuleCall getValueDependencyObjectParserRuleCall_2_0_0() { return cValueDependencyObjectParserRuleCall_2_0_0; }

		//("," value+=DependencyObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=DependencyObject
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//DependencyObject
		public RuleCall getValueDependencyObjectParserRuleCall_2_1_1_0() { return cValueDependencyObjectParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class DependencyObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyObject");
		private final RuleCall cJsonDependencyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DependencyObject returns JsonObject:
		//	JsonDependency;
		public ParserRule getRule() { return rule; }

		//JsonDependency
		public RuleCall getJsonDependencyParserRuleCall() { return cJsonDependencyParserRuleCall; }
	}

	public class JsonDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsDependencyPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsDependencyPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonDependency:
		//	"{" pairs+=DependencyPair ("," pairs+=DependencyPair)* "}";
		public ParserRule getRule() { return rule; }

		//"{" pairs+=DependencyPair ("," pairs+=DependencyPair)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//pairs+=DependencyPair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//DependencyPair
		public RuleCall getPairsDependencyPairParserRuleCall_1_0() { return cPairsDependencyPairParserRuleCall_1_0; }

		//("," pairs+=DependencyPair)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//pairs+=DependencyPair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//DependencyPair
		public RuleCall getPairsDependencyPairParserRuleCall_2_1_0() { return cPairsDependencyPairParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class DependencyPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyPair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetadataRefPairParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVRPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnrecognizedRequirementPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//DependencyPair returns Pair:
		//	MetadataRefPair | VRPair | UnrecognizedRequirementPair;
		public ParserRule getRule() { return rule; }

		//MetadataRefPair | VRPair | UnrecognizedRequirementPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//MetadataRefPair
		public RuleCall getMetadataRefPairParserRuleCall_0() { return cMetadataRefPairParserRuleCall_0; }

		//VRPair
		public RuleCall getVRPairParserRuleCall_1() { return cVRPairParserRuleCall_1; }

		//UnrecognizedRequirementPair
		public RuleCall getUnrecognizedRequirementPairParserRuleCall_2() { return cUnrecognizedRequirementPairParserRuleCall_2; }
	}

	public class MetadataRefPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MetadataRefPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameNameKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRefAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRefJsonMetadataCrossReference_2_0 = (CrossReference)cRefAssignment_2.eContents().get(0);
		private final RuleCall cRefJsonMetadataSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cRefJsonMetadataCrossReference_2_0.eContents().get(1);
		
		//MetadataRefPair:
		//	name="\"name\"" ":" ref=[JsonMetadata|STRING];
		public ParserRule getRule() { return rule; }

		//name="\"name\"" ":" ref=[JsonMetadata|STRING]
		public Group getGroup() { return cGroup; }

		//name="\"name\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"name\""
		public Keyword getNameNameKeyword_0_0() { return cNameNameKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//ref=[JsonMetadata|STRING]
		public Assignment getRefAssignment_2() { return cRefAssignment_2; }

		//[JsonMetadata|STRING]
		public CrossReference getRefJsonMetadataCrossReference_2_0() { return cRefJsonMetadataCrossReference_2_0; }

		//STRING
		public RuleCall getRefJsonMetadataSTRINGTerminalRuleCall_2_0_1() { return cRefJsonMetadataSTRINGTerminalRuleCall_2_0_1; }
	}

	public class RequirementArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueRequirementObjectParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueRequirementObjectParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RequirementArray returns JsonArray:
		//	{JsonArray} "[" (value+=RequirementObject ("," value+=RequirementObject)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=RequirementObject ("," value+=RequirementObject)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=RequirementObject ("," value+=RequirementObject)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=RequirementObject
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//RequirementObject
		public RuleCall getValueRequirementObjectParserRuleCall_2_0_0() { return cValueRequirementObjectParserRuleCall_2_0_0; }

		//("," value+=RequirementObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=RequirementObject
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//RequirementObject
		public RuleCall getValueRequirementObjectParserRuleCall_2_1_1_0() { return cValueRequirementObjectParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class RequirementObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementObject");
		private final RuleCall cJsonRequirementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RequirementObject returns JsonObject:
		//	JsonRequirement;
		public ParserRule getRule() { return rule; }

		//JsonRequirement
		public RuleCall getJsonRequirementParserRuleCall() { return cJsonRequirementParserRuleCall; }
	}

	public class JsonRequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonRequirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsRequirementPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsRequirementPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonRequirement:
		//	"{" pairs+=RequirementPair ("," pairs+=RequirementPair)* "}";
		public ParserRule getRule() { return rule; }

		//"{" pairs+=RequirementPair ("," pairs+=RequirementPair)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//pairs+=RequirementPair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//RequirementPair
		public RuleCall getPairsRequirementPairParserRuleCall_1_0() { return cPairsRequirementPairParserRuleCall_1_0; }

		//("," pairs+=RequirementPair)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//pairs+=RequirementPair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//RequirementPair
		public RuleCall getPairsRequirementPairParserRuleCall_2_1_0() { return cPairsRequirementPairParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class RequirementPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementPair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameNameKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueRequirementNameParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final RuleCall cVRPairParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnrecognizedRequirementPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//RequirementPair returns Pair:
		//	name="\"name\"" ":" value=RequirementName | VRPair | UnrecognizedRequirementPair;
		public ParserRule getRule() { return rule; }

		//name="\"name\"" ":" value=RequirementName | VRPair | UnrecognizedRequirementPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="\"name\"" ":" value=RequirementName
		public Group getGroup_0() { return cGroup_0; }

		//name="\"name\""
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"\"name\""
		public Keyword getNameNameKeyword_0_0_0() { return cNameNameKeyword_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//value=RequirementName
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//RequirementName
		public RuleCall getValueRequirementNameParserRuleCall_0_2_0() { return cValueRequirementNameParserRuleCall_0_2_0; }

		//VRPair
		public RuleCall getVRPairParserRuleCall_1() { return cVRPairParserRuleCall_1; }

		//UnrecognizedRequirementPair
		public RuleCall getUnrecognizedRequirementPairParserRuleCall_2() { return cUnrecognizedRequirementPairParserRuleCall_2; }
	}

	public class RequirementNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementName");
		private final RuleCall cRequirementNameValueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//RequirementName returns JsonValue:
		//	RequirementNameValue;
		public ParserRule getRule() { return rule; }

		//RequirementNameValue
		public RuleCall getRequirementNameValueParserRuleCall() { return cRequirementNameValueParserRuleCall; }
	}

	public class RequirementNameValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequirementNameValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//RequirementNameValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class VRPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VRPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameVersion_requirementKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVersionRangeParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//VRPair returns Pair:
		//	name="\"version_requirement\"" ":" value=VersionRange;
		public ParserRule getRule() { return rule; }

		//name="\"version_requirement\"" ":" value=VersionRange
		public Group getGroup() { return cGroup; }

		//name="\"version_requirement\""
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"\"version_requirement\""
		public Keyword getNameVersion_requirementKeyword_0_0() { return cNameVersion_requirementKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=VersionRange
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VersionRange
		public RuleCall getValueVersionRangeParserRuleCall_2_0() { return cValueVersionRangeParserRuleCall_2_0; }
	}

	public class UnrecognizedRequirementPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnrecognizedRequirementPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQ_ReqUnknownKeyParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//UnrecognizedRequirementPair returns UnrecognizedPair:
		//	name=Q_ReqUnknownKey ":" value=Value;
		public ParserRule getRule() { return rule; }

		//name=Q_ReqUnknownKey ":" value=Value
		public Group getGroup() { return cGroup; }

		//name=Q_ReqUnknownKey
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Q_ReqUnknownKey
		public RuleCall getNameQ_ReqUnknownKeyParserRuleCall_0_0() { return cNameQ_ReqUnknownKeyParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class VersionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VersionRange");
		private final RuleCall cJsonVersionRangeParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//VersionRange returns JsonValue:
		//	JsonVersionRange;
		public ParserRule getRule() { return rule; }

		//JsonVersionRange
		public RuleCall getJsonVersionRangeParserRuleCall() { return cJsonVersionRangeParserRuleCall; }
	}

	public class JsonVersionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonVersionRange");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JsonVersionRange:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class ModuleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModuleName");
		private final RuleCall cJsonModuleNameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ModuleName returns JsonValue:
		//	JsonModuleName;
		public ParserRule getRule() { return rule; }

		//JsonModuleName
		public RuleCall getJsonModuleNameParserRuleCall() { return cJsonModuleNameParserRuleCall; }
	}

	public class JsonModuleNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonModuleName");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JsonModuleName:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class TagArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TagArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueTagParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueTagParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TagArray returns JsonArray:
		//	{JsonArray} "[" (value+=Tag ("," value+=Tag)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=Tag ("," value+=Tag)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=Tag ("," value+=Tag)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=Tag
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Tag
		public RuleCall getValueTagParserRuleCall_2_0_0() { return cValueTagParserRuleCall_2_0_0; }

		//("," value+=Tag)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=Tag
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//Tag
		public RuleCall getValueTagParserRuleCall_2_1_1_0() { return cValueTagParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Tag");
		private final RuleCall cJsonTagParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Tag returns JsonValue:
		//	JsonTag;
		public ParserRule getRule() { return rule; }

		//JsonTag
		public RuleCall getJsonTagParserRuleCall() { return cJsonTagParserRuleCall; }
	}

	public class JsonTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonTag");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQ_StringOrKeyParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JsonTag:
		//	value=Q_StringOrKey;
		public ParserRule getRule() { return rule; }

		//value=Q_StringOrKey
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Q_StringOrKey
		public RuleCall getValueQ_StringOrKeyParserRuleCall_0() { return cValueQ_StringOrKeyParserRuleCall_0; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final RuleCall cJsonVersionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Version returns JsonValue:
		//	JsonVersion;
		public ParserRule getRule() { return rule; }

		//JsonVersion
		public RuleCall getJsonVersionParserRuleCall() { return cJsonVersionParserRuleCall; }
	}

	public class JsonVersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonVersion");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JsonVersion:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class OSArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueOSObjectParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueOSObjectParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OSArray returns JsonArray:
		//	{JsonArray} "[" (value+=OSObject ("," value+=OSObject)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=OSObject ("," value+=OSObject)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=OSObject ("," value+=OSObject)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=OSObject
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//OSObject
		public RuleCall getValueOSObjectParserRuleCall_2_0_0() { return cValueOSObjectParserRuleCall_2_0_0; }

		//("," value+=OSObject)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=OSObject
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//OSObject
		public RuleCall getValueOSObjectParserRuleCall_2_1_1_0() { return cValueOSObjectParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class OSObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSObject");
		private final RuleCall cJsonOSParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//OSObject returns JsonObject:
		//	JsonOS;
		public ParserRule getRule() { return rule; }

		//JsonOS
		public RuleCall getJsonOSParserRuleCall() { return cJsonOSParserRuleCall; }
	}

	public class JsonOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonOS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsOSPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsOSPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonOS:
		//	"{" pairs+=OSPair ("," pairs+=OSPair)* "}";
		public ParserRule getRule() { return rule; }

		//"{" pairs+=OSPair ("," pairs+=OSPair)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//pairs+=OSPair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//OSPair
		public RuleCall getPairsOSPairParserRuleCall_1_0() { return cPairsOSPairParserRuleCall_1_0; }

		//("," pairs+=OSPair)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//pairs+=OSPair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//OSPair
		public RuleCall getPairsOSPairParserRuleCall_2_1_0() { return cPairsOSPairParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class OSPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSPair");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cNameOperatingsystemKeyword_0_0_0 = (Keyword)cNameAssignment_0_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cValueAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cValueStringLiteralParserRuleCall_0_2_0 = (RuleCall)cValueAssignment_0_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cNameOperatingsystemreleaseKeyword_1_0_0 = (Keyword)cNameAssignment_1_0.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cValueAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cValueStringArrayParserRuleCall_1_2_0 = (RuleCall)cValueAssignment_1_2.eContents().get(0);
		private final RuleCall cUnrecognizedOSPairParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//OSPair returns Pair:
		//	name="\"operatingsystem\"" ":" value=StringLiteral | name="\"operatingsystemrelease\"" ":" value=StringArray |
		//	UnrecognizedOSPair;
		public ParserRule getRule() { return rule; }

		//name="\"operatingsystem\"" ":" value=StringLiteral | name="\"operatingsystemrelease\"" ":" value=StringArray |
		//UnrecognizedOSPair
		public Alternatives getAlternatives() { return cAlternatives; }

		//name="\"operatingsystem\"" ":" value=StringLiteral
		public Group getGroup_0() { return cGroup_0; }

		//name="\"operatingsystem\""
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//"\"operatingsystem\""
		public Keyword getNameOperatingsystemKeyword_0_0_0() { return cNameOperatingsystemKeyword_0_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//value=StringLiteral
		public Assignment getValueAssignment_0_2() { return cValueAssignment_0_2; }

		//StringLiteral
		public RuleCall getValueStringLiteralParserRuleCall_0_2_0() { return cValueStringLiteralParserRuleCall_0_2_0; }

		//name="\"operatingsystemrelease\"" ":" value=StringArray
		public Group getGroup_1() { return cGroup_1; }

		//name="\"operatingsystemrelease\""
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }

		//"\"operatingsystemrelease\""
		public Keyword getNameOperatingsystemreleaseKeyword_1_0_0() { return cNameOperatingsystemreleaseKeyword_1_0_0; }

		//":"
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//value=StringArray
		public Assignment getValueAssignment_1_2() { return cValueAssignment_1_2; }

		//StringArray
		public RuleCall getValueStringArrayParserRuleCall_1_2_0() { return cValueStringArrayParserRuleCall_1_2_0; }

		//UnrecognizedOSPair
		public RuleCall getUnrecognizedOSPairParserRuleCall_2() { return cUnrecognizedOSPairParserRuleCall_2; }
	}

	public class UnrecognizedOSPairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnrecognizedOSPair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQ_OsUnknownKeyParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//UnrecognizedOSPair returns UnrecognizedPair:
		//	name=Q_OsUnknownKey ":" value=Value;
		public ParserRule getRule() { return rule; }

		//name=Q_OsUnknownKey ":" value=Value
		public Group getGroup() { return cGroup; }

		//name=Q_OsUnknownKey
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Q_OsUnknownKey
		public RuleCall getNameQ_OsUnknownKeyParserRuleCall_0_0() { return cNameQ_OsUnknownKeyParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameQ_StringOrKeyParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Pair:
		//	name=Q_StringOrKey ":" value=Value;
		public ParserRule getRule() { return rule; }

		//name=Q_StringOrKey ":" value=Value
		public Group getGroup() { return cGroup; }

		//name=Q_StringOrKey
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//Q_StringOrKey
		public RuleCall getNameQ_StringOrKeyParserRuleCall_0_0() { return cNameQ_StringOrKeyParserRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDoubleLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLongLiteralParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJsonObjectParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cJsonArrayParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Value:
		//	BooleanLiteral | NullValue | StringLiteral | DoubleLiteral | LongLiteral | JsonObject | JsonArray;
		public ParserRule getRule() { return rule; }

		//BooleanLiteral | NullValue | StringLiteral | DoubleLiteral | LongLiteral | JsonObject | JsonArray
		public Alternatives getAlternatives() { return cAlternatives; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }

		//NullValue
		public RuleCall getNullValueParserRuleCall_1() { return cNullValueParserRuleCall_1; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_2() { return cStringLiteralParserRuleCall_2; }

		//DoubleLiteral
		public RuleCall getDoubleLiteralParserRuleCall_3() { return cDoubleLiteralParserRuleCall_3; }

		//LongLiteral
		public RuleCall getLongLiteralParserRuleCall_4() { return cLongLiteralParserRuleCall_4; }

		//JsonObject
		public RuleCall getJsonObjectParserRuleCall_5() { return cJsonObjectParserRuleCall_5; }

		//JsonArray
		public RuleCall getJsonArrayParserRuleCall_6() { return cJsonArrayParserRuleCall_6; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueQ_StringOrKeyParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral returns JsonValue:
		//	value=Q_StringOrKey;
		public ParserRule getRule() { return rule; }

		//value=Q_StringOrKey
		public Assignment getValueAssignment() { return cValueAssignment; }

		//Q_StringOrKey
		public RuleCall getValueQ_StringOrKeyParserRuleCall_0() { return cValueQ_StringOrKeyParserRuleCall_0; }
	}

	public class Q_StringOrKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Q_StringOrKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLicenseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOperatingsystemKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOperatingsystem_supportKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cOperatingsystemreleaseKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cParametersKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cProject_pageKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRequirementsKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSourceKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cSummaryKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cTagsKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cVersionKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cVersion_requirementKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final RuleCall cSTRINGTerminalRuleCall_16 = (RuleCall)cAlternatives.eContents().get(16);
		
		/// * Any key literal or a String * / Q_StringOrKey returns ecore::EString:
		//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem\"" |
		//	"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
		//	"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | "\"version_requirement\"" | STRING;
		public ParserRule getRule() { return rule; }

		//"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem\"" |
		//"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
		//"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | "\"version_requirement\"" | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"author\""
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }

		//"\"dependencies\""
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }

		//"\"description\""
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//"\"license\""
		public Keyword getLicenseKeyword_3() { return cLicenseKeyword_3; }

		//"\"name\""
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }

		//"\"operatingsystem\""
		public Keyword getOperatingsystemKeyword_5() { return cOperatingsystemKeyword_5; }

		//"\"operatingsystem_support\""
		public Keyword getOperatingsystem_supportKeyword_6() { return cOperatingsystem_supportKeyword_6; }

		//"\"operatingsystemrelease\""
		public Keyword getOperatingsystemreleaseKeyword_7() { return cOperatingsystemreleaseKeyword_7; }

		//"\"parameters\""
		public Keyword getParametersKeyword_8() { return cParametersKeyword_8; }

		//"\"project_page\""
		public Keyword getProject_pageKeyword_9() { return cProject_pageKeyword_9; }

		//"\"requirements\""
		public Keyword getRequirementsKeyword_10() { return cRequirementsKeyword_10; }

		//"\"source\""
		public Keyword getSourceKeyword_11() { return cSourceKeyword_11; }

		//"\"summary\""
		public Keyword getSummaryKeyword_12() { return cSummaryKeyword_12; }

		//"\"tags\""
		public Keyword getTagsKeyword_13() { return cTagsKeyword_13; }

		//"\"version\""
		public Keyword getVersionKeyword_14() { return cVersionKeyword_14; }

		//"\"version_requirement\""
		public Keyword getVersion_requirementKeyword_15() { return cVersion_requirementKeyword_15; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_16() { return cSTRINGTerminalRuleCall_16; }
	}

	public class Q_ReqUnknownKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Q_ReqUnknownKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLicenseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOperatingsystemKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOperatingsystem_supportKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cOperatingsystemreleaseKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cParametersKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cProject_pageKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cRequirementsKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSourceKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cSummaryKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cTagsKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cVersionKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final RuleCall cSTRINGTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		/// * Any key literal or a String except the ones recognized by DependencyPair or RequirementPair * / Q_ReqUnknownKey
		//returns ecore::EString:
		//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"operatingsystem\"" |
		//	"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
		//	"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | STRING;
		public ParserRule getRule() { return rule; }

		//"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"operatingsystem\"" |
		//"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
		//"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"author\""
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }

		//"\"dependencies\""
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }

		//"\"description\""
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//"\"license\""
		public Keyword getLicenseKeyword_3() { return cLicenseKeyword_3; }

		//"\"operatingsystem\""
		public Keyword getOperatingsystemKeyword_4() { return cOperatingsystemKeyword_4; }

		//"\"operatingsystem_support\""
		public Keyword getOperatingsystem_supportKeyword_5() { return cOperatingsystem_supportKeyword_5; }

		//"\"operatingsystemrelease\""
		public Keyword getOperatingsystemreleaseKeyword_6() { return cOperatingsystemreleaseKeyword_6; }

		//"\"parameters\""
		public Keyword getParametersKeyword_7() { return cParametersKeyword_7; }

		//"\"project_page\""
		public Keyword getProject_pageKeyword_8() { return cProject_pageKeyword_8; }

		//"\"requirements\""
		public Keyword getRequirementsKeyword_9() { return cRequirementsKeyword_9; }

		//"\"source\""
		public Keyword getSourceKeyword_10() { return cSourceKeyword_10; }

		//"\"summary\""
		public Keyword getSummaryKeyword_11() { return cSummaryKeyword_11; }

		//"\"tags\""
		public Keyword getTagsKeyword_12() { return cTagsKeyword_12; }

		//"\"version\""
		public Keyword getVersionKeyword_13() { return cVersionKeyword_13; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_14() { return cSTRINGTerminalRuleCall_14; }
	}

	public class Q_OsUnknownKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Q_OsUnknownKey");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAuthorKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDependenciesKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cDescriptionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLicenseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cNameKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cOperatingsystem_supportKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cParametersKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cProject_pageKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRequirementsKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cSourceKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cSummaryKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cTagsKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cVersionKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cVersion_requirementKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final RuleCall cSTRINGTerminalRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		/// * Any key literal or a String except the ones listed in OSPair * / Q_OsUnknownKey returns ecore::EString:
		//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem_support\"" |
		//	"\"parameters\"" | "\"project_page\"" | "\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\""
		//	| "\"version_requirement\"" | STRING;
		public ParserRule getRule() { return rule; }

		//"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem_support\"" |
		//"\"parameters\"" | "\"project_page\"" | "\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\""
		//| "\"version_requirement\"" | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\"author\""
		public Keyword getAuthorKeyword_0() { return cAuthorKeyword_0; }

		//"\"dependencies\""
		public Keyword getDependenciesKeyword_1() { return cDependenciesKeyword_1; }

		//"\"description\""
		public Keyword getDescriptionKeyword_2() { return cDescriptionKeyword_2; }

		//"\"license\""
		public Keyword getLicenseKeyword_3() { return cLicenseKeyword_3; }

		//"\"name\""
		public Keyword getNameKeyword_4() { return cNameKeyword_4; }

		//"\"operatingsystem_support\""
		public Keyword getOperatingsystem_supportKeyword_5() { return cOperatingsystem_supportKeyword_5; }

		//"\"parameters\""
		public Keyword getParametersKeyword_6() { return cParametersKeyword_6; }

		//"\"project_page\""
		public Keyword getProject_pageKeyword_7() { return cProject_pageKeyword_7; }

		//"\"requirements\""
		public Keyword getRequirementsKeyword_8() { return cRequirementsKeyword_8; }

		//"\"source\""
		public Keyword getSourceKeyword_9() { return cSourceKeyword_9; }

		//"\"summary\""
		public Keyword getSummaryKeyword_10() { return cSummaryKeyword_10; }

		//"\"tags\""
		public Keyword getTagsKeyword_11() { return cTagsKeyword_11; }

		//"\"version\""
		public Keyword getVersionKeyword_12() { return cVersionKeyword_12; }

		//"\"version_requirement\""
		public Keyword getVersion_requirementKeyword_13() { return cVersion_requirementKeyword_13; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_14() { return cSTRINGTerminalRuleCall_14; }
	}

	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNULLParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NullValue returns JsonValue:
		//	value=NULL;
		public ParserRule getRule() { return rule; }

		//value=NULL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NULL
		public RuleCall getValueNULLParserRuleCall_0() { return cValueNULLParserRuleCall_0; }
	}

	public class DoubleLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleLiteral returns JsonValue:
		//	value=DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DOUBLE
		public RuleCall getValueDOUBLETerminalRuleCall_0() { return cValueDOUBLETerminalRuleCall_0; }
	}

	public class LongLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueLONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongLiteral returns JsonValue:
		//	value=LONG;
		public ParserRule getRule() { return rule; }

		//value=LONG
		public Assignment getValueAssignment() { return cValueAssignment; }

		//LONG
		public RuleCall getValueLONGTerminalRuleCall_0() { return cValueLONGTerminalRuleCall_0; }
	}

	public class JsonArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJsonArrayAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonArray:
		//	{JsonArray} "[" (value+=Value ("," value+=Value)*)? "]";
		public ParserRule getRule() { return rule; }

		//{JsonArray} "[" (value+=Value ("," value+=Value)*)? "]"
		public Group getGroup() { return cGroup; }

		//{JsonArray}
		public Action getJsonArrayAction_0() { return cJsonArrayAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(value+=Value ("," value+=Value)*)?
		public Group getGroup_2() { return cGroup_2; }

		//value+=Value
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0_0() { return cValueValueParserRuleCall_2_0_0; }

		//("," value+=Value)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//value+=Value
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_1_1_0() { return cValueValueParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanLiteral returns JsonValue:
		//	value=BOOL;
		public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_0() { return cValueBOOLParserRuleCall_0; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL returns ecore::EBooleanObject:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NULL");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NULL returns ecore::EJavaObject:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	
	
	private ModelElements pModel;
	private JsonMetadataElements pJsonMetadata;
	private JsonObjectElements pJsonObject;
	private MetadataPairElements pMetadataPair;
	private AuthorPairElements pAuthorPair;
	private DependenciesPairElements pDependenciesPair;
	private DescriptionPairElements pDescriptionPair;
	private LicensePairElements pLicensePair;
	private NamePairElements pNamePair;
	private OperatingsystemSupportPairElements pOperatingsystemSupportPair;
	private ProjectPagePairElements pProjectPagePair;
	private RequirementsPairElements pRequirementsPair;
	private SourcePairElements pSourcePair;
	private SummaryPairElements pSummaryPair;
	private TagsPairElements pTagsPair;
	private VersionPairElements pVersionPair;
	private UnrecognizedMetadataPairElements pUnrecognizedMetadataPair;
	private StringArrayElements pStringArray;
	private DependencyArrayElements pDependencyArray;
	private DependencyObjectElements pDependencyObject;
	private JsonDependencyElements pJsonDependency;
	private DependencyPairElements pDependencyPair;
	private MetadataRefPairElements pMetadataRefPair;
	private RequirementArrayElements pRequirementArray;
	private RequirementObjectElements pRequirementObject;
	private JsonRequirementElements pJsonRequirement;
	private RequirementPairElements pRequirementPair;
	private RequirementNameElements pRequirementName;
	private RequirementNameValueElements pRequirementNameValue;
	private VRPairElements pVRPair;
	private UnrecognizedRequirementPairElements pUnrecognizedRequirementPair;
	private VersionRangeElements pVersionRange;
	private JsonVersionRangeElements pJsonVersionRange;
	private ModuleNameElements pModuleName;
	private JsonModuleNameElements pJsonModuleName;
	private TagArrayElements pTagArray;
	private TagElements pTag;
	private JsonTagElements pJsonTag;
	private VersionElements pVersion;
	private JsonVersionElements pJsonVersion;
	private OSArrayElements pOSArray;
	private OSObjectElements pOSObject;
	private JsonOSElements pJsonOS;
	private OSPairElements pOSPair;
	private UnrecognizedOSPairElements pUnrecognizedOSPair;
	private PairElements pPair;
	private ValueElements pValue;
	private StringLiteralElements pStringLiteral;
	private Q_StringOrKeyElements pQ_StringOrKey;
	private Q_ReqUnknownKeyElements pQ_ReqUnknownKey;
	private Q_OsUnknownKeyElements pQ_OsUnknownKey;
	private NullValueElements pNullValue;
	private DoubleLiteralElements pDoubleLiteral;
	private LongLiteralElements pLongLiteral;
	private JsonArrayElements pJsonArray;
	private BooleanLiteralElements pBooleanLiteral;
	private BOOLElements pBOOL;
	private NULLElements pNULL;
	private TerminalRule tDIGIT;
	private TerminalRule tEXPONENT;
	private TerminalRule tLONG;
	private TerminalRule tDOUBLE;
	private TerminalRule tSTRING;
	private TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public ModuleGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.puppetlabs.geppetto.module.dsl.Module".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//Model returns JsonObject:
	//	JsonMetadata;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//JsonMetadata:
	//	"{" pairs+=MetadataPair ("," pairs+=MetadataPair)* "}";
	public JsonMetadataElements getJsonMetadataAccess() {
		return (pJsonMetadata != null) ? pJsonMetadata : (pJsonMetadata = new JsonMetadataElements());
	}
	
	public ParserRule getJsonMetadataRule() {
		return getJsonMetadataAccess().getRule();
	}

	//JsonObject:
	//	{JsonObject} "{" (pairs+=Pair ("," pairs+=Pair)*)? "}";
	public JsonObjectElements getJsonObjectAccess() {
		return (pJsonObject != null) ? pJsonObject : (pJsonObject = new JsonObjectElements());
	}
	
	public ParserRule getJsonObjectRule() {
		return getJsonObjectAccess().getRule();
	}

	//MetadataPair returns Pair:
	//	AuthorPair | DependenciesPair | DescriptionPair | LicensePair | NamePair | ProjectPagePair | SourcePair | SummaryPair
	//	| RequirementsPair | OperatingsystemSupportPair | TagsPair | VersionPair | UnrecognizedMetadataPair;
	public MetadataPairElements getMetadataPairAccess() {
		return (pMetadataPair != null) ? pMetadataPair : (pMetadataPair = new MetadataPairElements());
	}
	
	public ParserRule getMetadataPairRule() {
		return getMetadataPairAccess().getRule();
	}

	//AuthorPair returns Pair:
	//	name="\"author\"" ":" value=StringLiteral;
	public AuthorPairElements getAuthorPairAccess() {
		return (pAuthorPair != null) ? pAuthorPair : (pAuthorPair = new AuthorPairElements());
	}
	
	public ParserRule getAuthorPairRule() {
		return getAuthorPairAccess().getRule();
	}

	//DependenciesPair returns Pair:
	//	name="\"dependencies\"" ":" value=DependencyArray;
	public DependenciesPairElements getDependenciesPairAccess() {
		return (pDependenciesPair != null) ? pDependenciesPair : (pDependenciesPair = new DependenciesPairElements());
	}
	
	public ParserRule getDependenciesPairRule() {
		return getDependenciesPairAccess().getRule();
	}

	//DescriptionPair returns Pair:
	//	name="\"description\"" ":" value=StringLiteral;
	public DescriptionPairElements getDescriptionPairAccess() {
		return (pDescriptionPair != null) ? pDescriptionPair : (pDescriptionPair = new DescriptionPairElements());
	}
	
	public ParserRule getDescriptionPairRule() {
		return getDescriptionPairAccess().getRule();
	}

	//LicensePair returns Pair:
	//	name="\"license\"" ":" value=StringLiteral;
	public LicensePairElements getLicensePairAccess() {
		return (pLicensePair != null) ? pLicensePair : (pLicensePair = new LicensePairElements());
	}
	
	public ParserRule getLicensePairRule() {
		return getLicensePairAccess().getRule();
	}

	//NamePair returns Pair:
	//	name="\"name\"" ":" value=ModuleName;
	public NamePairElements getNamePairAccess() {
		return (pNamePair != null) ? pNamePair : (pNamePair = new NamePairElements());
	}
	
	public ParserRule getNamePairRule() {
		return getNamePairAccess().getRule();
	}

	//OperatingsystemSupportPair returns Pair:
	//	name="\"operatingsystem_support\"" ":" value=OSArray;
	public OperatingsystemSupportPairElements getOperatingsystemSupportPairAccess() {
		return (pOperatingsystemSupportPair != null) ? pOperatingsystemSupportPair : (pOperatingsystemSupportPair = new OperatingsystemSupportPairElements());
	}
	
	public ParserRule getOperatingsystemSupportPairRule() {
		return getOperatingsystemSupportPairAccess().getRule();
	}

	//ProjectPagePair returns Pair:
	//	name="\"project_page\"" ":" value=StringLiteral;
	public ProjectPagePairElements getProjectPagePairAccess() {
		return (pProjectPagePair != null) ? pProjectPagePair : (pProjectPagePair = new ProjectPagePairElements());
	}
	
	public ParserRule getProjectPagePairRule() {
		return getProjectPagePairAccess().getRule();
	}

	//RequirementsPair returns Pair:
	//	name="\"requirements\"" ":" value=RequirementArray;
	public RequirementsPairElements getRequirementsPairAccess() {
		return (pRequirementsPair != null) ? pRequirementsPair : (pRequirementsPair = new RequirementsPairElements());
	}
	
	public ParserRule getRequirementsPairRule() {
		return getRequirementsPairAccess().getRule();
	}

	//SourcePair returns Pair:
	//	name="\"source\"" ":" value=StringLiteral;
	public SourcePairElements getSourcePairAccess() {
		return (pSourcePair != null) ? pSourcePair : (pSourcePair = new SourcePairElements());
	}
	
	public ParserRule getSourcePairRule() {
		return getSourcePairAccess().getRule();
	}

	//SummaryPair returns Pair:
	//	name="\"summary\"" ":" value=StringLiteral;
	public SummaryPairElements getSummaryPairAccess() {
		return (pSummaryPair != null) ? pSummaryPair : (pSummaryPair = new SummaryPairElements());
	}
	
	public ParserRule getSummaryPairRule() {
		return getSummaryPairAccess().getRule();
	}

	//TagsPair returns Pair:
	//	name="\"tags\"" ":" value=TagArray;
	public TagsPairElements getTagsPairAccess() {
		return (pTagsPair != null) ? pTagsPair : (pTagsPair = new TagsPairElements());
	}
	
	public ParserRule getTagsPairRule() {
		return getTagsPairAccess().getRule();
	}

	//VersionPair returns Pair:
	//	name="\"version\"" ":" value=Version;
	public VersionPairElements getVersionPairAccess() {
		return (pVersionPair != null) ? pVersionPair : (pVersionPair = new VersionPairElements());
	}
	
	public ParserRule getVersionPairRule() {
		return getVersionPairAccess().getRule();
	}

	//UnrecognizedMetadataPair returns UnrecognizedPair:
	//	name=STRING ":" value=Value;
	public UnrecognizedMetadataPairElements getUnrecognizedMetadataPairAccess() {
		return (pUnrecognizedMetadataPair != null) ? pUnrecognizedMetadataPair : (pUnrecognizedMetadataPair = new UnrecognizedMetadataPairElements());
	}
	
	public ParserRule getUnrecognizedMetadataPairRule() {
		return getUnrecognizedMetadataPairAccess().getRule();
	}

	//StringArray returns JsonArray:
	//	{JsonArray} "[" (value+=StringLiteral ("," value+=StringLiteral)*)? "]";
	public StringArrayElements getStringArrayAccess() {
		return (pStringArray != null) ? pStringArray : (pStringArray = new StringArrayElements());
	}
	
	public ParserRule getStringArrayRule() {
		return getStringArrayAccess().getRule();
	}

	//DependencyArray returns JsonArray:
	//	{JsonArray} "[" (value+=DependencyObject ("," value+=DependencyObject)*)? "]";
	public DependencyArrayElements getDependencyArrayAccess() {
		return (pDependencyArray != null) ? pDependencyArray : (pDependencyArray = new DependencyArrayElements());
	}
	
	public ParserRule getDependencyArrayRule() {
		return getDependencyArrayAccess().getRule();
	}

	//DependencyObject returns JsonObject:
	//	JsonDependency;
	public DependencyObjectElements getDependencyObjectAccess() {
		return (pDependencyObject != null) ? pDependencyObject : (pDependencyObject = new DependencyObjectElements());
	}
	
	public ParserRule getDependencyObjectRule() {
		return getDependencyObjectAccess().getRule();
	}

	//JsonDependency:
	//	"{" pairs+=DependencyPair ("," pairs+=DependencyPair)* "}";
	public JsonDependencyElements getJsonDependencyAccess() {
		return (pJsonDependency != null) ? pJsonDependency : (pJsonDependency = new JsonDependencyElements());
	}
	
	public ParserRule getJsonDependencyRule() {
		return getJsonDependencyAccess().getRule();
	}

	//DependencyPair returns Pair:
	//	MetadataRefPair | VRPair | UnrecognizedRequirementPair;
	public DependencyPairElements getDependencyPairAccess() {
		return (pDependencyPair != null) ? pDependencyPair : (pDependencyPair = new DependencyPairElements());
	}
	
	public ParserRule getDependencyPairRule() {
		return getDependencyPairAccess().getRule();
	}

	//MetadataRefPair:
	//	name="\"name\"" ":" ref=[JsonMetadata|STRING];
	public MetadataRefPairElements getMetadataRefPairAccess() {
		return (pMetadataRefPair != null) ? pMetadataRefPair : (pMetadataRefPair = new MetadataRefPairElements());
	}
	
	public ParserRule getMetadataRefPairRule() {
		return getMetadataRefPairAccess().getRule();
	}

	//RequirementArray returns JsonArray:
	//	{JsonArray} "[" (value+=RequirementObject ("," value+=RequirementObject)*)? "]";
	public RequirementArrayElements getRequirementArrayAccess() {
		return (pRequirementArray != null) ? pRequirementArray : (pRequirementArray = new RequirementArrayElements());
	}
	
	public ParserRule getRequirementArrayRule() {
		return getRequirementArrayAccess().getRule();
	}

	//RequirementObject returns JsonObject:
	//	JsonRequirement;
	public RequirementObjectElements getRequirementObjectAccess() {
		return (pRequirementObject != null) ? pRequirementObject : (pRequirementObject = new RequirementObjectElements());
	}
	
	public ParserRule getRequirementObjectRule() {
		return getRequirementObjectAccess().getRule();
	}

	//JsonRequirement:
	//	"{" pairs+=RequirementPair ("," pairs+=RequirementPair)* "}";
	public JsonRequirementElements getJsonRequirementAccess() {
		return (pJsonRequirement != null) ? pJsonRequirement : (pJsonRequirement = new JsonRequirementElements());
	}
	
	public ParserRule getJsonRequirementRule() {
		return getJsonRequirementAccess().getRule();
	}

	//RequirementPair returns Pair:
	//	name="\"name\"" ":" value=RequirementName | VRPair | UnrecognizedRequirementPair;
	public RequirementPairElements getRequirementPairAccess() {
		return (pRequirementPair != null) ? pRequirementPair : (pRequirementPair = new RequirementPairElements());
	}
	
	public ParserRule getRequirementPairRule() {
		return getRequirementPairAccess().getRule();
	}

	//RequirementName returns JsonValue:
	//	RequirementNameValue;
	public RequirementNameElements getRequirementNameAccess() {
		return (pRequirementName != null) ? pRequirementName : (pRequirementName = new RequirementNameElements());
	}
	
	public ParserRule getRequirementNameRule() {
		return getRequirementNameAccess().getRule();
	}

	//RequirementNameValue:
	//	value=STRING;
	public RequirementNameValueElements getRequirementNameValueAccess() {
		return (pRequirementNameValue != null) ? pRequirementNameValue : (pRequirementNameValue = new RequirementNameValueElements());
	}
	
	public ParserRule getRequirementNameValueRule() {
		return getRequirementNameValueAccess().getRule();
	}

	//VRPair returns Pair:
	//	name="\"version_requirement\"" ":" value=VersionRange;
	public VRPairElements getVRPairAccess() {
		return (pVRPair != null) ? pVRPair : (pVRPair = new VRPairElements());
	}
	
	public ParserRule getVRPairRule() {
		return getVRPairAccess().getRule();
	}

	//UnrecognizedRequirementPair returns UnrecognizedPair:
	//	name=Q_ReqUnknownKey ":" value=Value;
	public UnrecognizedRequirementPairElements getUnrecognizedRequirementPairAccess() {
		return (pUnrecognizedRequirementPair != null) ? pUnrecognizedRequirementPair : (pUnrecognizedRequirementPair = new UnrecognizedRequirementPairElements());
	}
	
	public ParserRule getUnrecognizedRequirementPairRule() {
		return getUnrecognizedRequirementPairAccess().getRule();
	}

	//VersionRange returns JsonValue:
	//	JsonVersionRange;
	public VersionRangeElements getVersionRangeAccess() {
		return (pVersionRange != null) ? pVersionRange : (pVersionRange = new VersionRangeElements());
	}
	
	public ParserRule getVersionRangeRule() {
		return getVersionRangeAccess().getRule();
	}

	//JsonVersionRange:
	//	value=STRING;
	public JsonVersionRangeElements getJsonVersionRangeAccess() {
		return (pJsonVersionRange != null) ? pJsonVersionRange : (pJsonVersionRange = new JsonVersionRangeElements());
	}
	
	public ParserRule getJsonVersionRangeRule() {
		return getJsonVersionRangeAccess().getRule();
	}

	//ModuleName returns JsonValue:
	//	JsonModuleName;
	public ModuleNameElements getModuleNameAccess() {
		return (pModuleName != null) ? pModuleName : (pModuleName = new ModuleNameElements());
	}
	
	public ParserRule getModuleNameRule() {
		return getModuleNameAccess().getRule();
	}

	//JsonModuleName:
	//	value=STRING;
	public JsonModuleNameElements getJsonModuleNameAccess() {
		return (pJsonModuleName != null) ? pJsonModuleName : (pJsonModuleName = new JsonModuleNameElements());
	}
	
	public ParserRule getJsonModuleNameRule() {
		return getJsonModuleNameAccess().getRule();
	}

	//TagArray returns JsonArray:
	//	{JsonArray} "[" (value+=Tag ("," value+=Tag)*)? "]";
	public TagArrayElements getTagArrayAccess() {
		return (pTagArray != null) ? pTagArray : (pTagArray = new TagArrayElements());
	}
	
	public ParserRule getTagArrayRule() {
		return getTagArrayAccess().getRule();
	}

	//Tag returns JsonValue:
	//	JsonTag;
	public TagElements getTagAccess() {
		return (pTag != null) ? pTag : (pTag = new TagElements());
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}

	//JsonTag:
	//	value=Q_StringOrKey;
	public JsonTagElements getJsonTagAccess() {
		return (pJsonTag != null) ? pJsonTag : (pJsonTag = new JsonTagElements());
	}
	
	public ParserRule getJsonTagRule() {
		return getJsonTagAccess().getRule();
	}

	//Version returns JsonValue:
	//	JsonVersion;
	public VersionElements getVersionAccess() {
		return (pVersion != null) ? pVersion : (pVersion = new VersionElements());
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//JsonVersion:
	//	value=STRING;
	public JsonVersionElements getJsonVersionAccess() {
		return (pJsonVersion != null) ? pJsonVersion : (pJsonVersion = new JsonVersionElements());
	}
	
	public ParserRule getJsonVersionRule() {
		return getJsonVersionAccess().getRule();
	}

	//OSArray returns JsonArray:
	//	{JsonArray} "[" (value+=OSObject ("," value+=OSObject)*)? "]";
	public OSArrayElements getOSArrayAccess() {
		return (pOSArray != null) ? pOSArray : (pOSArray = new OSArrayElements());
	}
	
	public ParserRule getOSArrayRule() {
		return getOSArrayAccess().getRule();
	}

	//OSObject returns JsonObject:
	//	JsonOS;
	public OSObjectElements getOSObjectAccess() {
		return (pOSObject != null) ? pOSObject : (pOSObject = new OSObjectElements());
	}
	
	public ParserRule getOSObjectRule() {
		return getOSObjectAccess().getRule();
	}

	//JsonOS:
	//	"{" pairs+=OSPair ("," pairs+=OSPair)* "}";
	public JsonOSElements getJsonOSAccess() {
		return (pJsonOS != null) ? pJsonOS : (pJsonOS = new JsonOSElements());
	}
	
	public ParserRule getJsonOSRule() {
		return getJsonOSAccess().getRule();
	}

	//OSPair returns Pair:
	//	name="\"operatingsystem\"" ":" value=StringLiteral | name="\"operatingsystemrelease\"" ":" value=StringArray |
	//	UnrecognizedOSPair;
	public OSPairElements getOSPairAccess() {
		return (pOSPair != null) ? pOSPair : (pOSPair = new OSPairElements());
	}
	
	public ParserRule getOSPairRule() {
		return getOSPairAccess().getRule();
	}

	//UnrecognizedOSPair returns UnrecognizedPair:
	//	name=Q_OsUnknownKey ":" value=Value;
	public UnrecognizedOSPairElements getUnrecognizedOSPairAccess() {
		return (pUnrecognizedOSPair != null) ? pUnrecognizedOSPair : (pUnrecognizedOSPair = new UnrecognizedOSPairElements());
	}
	
	public ParserRule getUnrecognizedOSPairRule() {
		return getUnrecognizedOSPairAccess().getRule();
	}

	//Pair:
	//	name=Q_StringOrKey ":" value=Value;
	public PairElements getPairAccess() {
		return (pPair != null) ? pPair : (pPair = new PairElements());
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}

	//Value:
	//	BooleanLiteral | NullValue | StringLiteral | DoubleLiteral | LongLiteral | JsonObject | JsonArray;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StringLiteral returns JsonValue:
	//	value=Q_StringOrKey;
	public StringLiteralElements getStringLiteralAccess() {
		return (pStringLiteral != null) ? pStringLiteral : (pStringLiteral = new StringLiteralElements());
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	/// * Any key literal or a String * / Q_StringOrKey returns ecore::EString:
	//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem\"" |
	//	"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
	//	"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | "\"version_requirement\"" | STRING;
	public Q_StringOrKeyElements getQ_StringOrKeyAccess() {
		return (pQ_StringOrKey != null) ? pQ_StringOrKey : (pQ_StringOrKey = new Q_StringOrKeyElements());
	}
	
	public ParserRule getQ_StringOrKeyRule() {
		return getQ_StringOrKeyAccess().getRule();
	}

	/// * Any key literal or a String except the ones recognized by DependencyPair or RequirementPair * / Q_ReqUnknownKey
	//returns ecore::EString:
	//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"operatingsystem\"" |
	//	"\"operatingsystem_support\"" | "\"operatingsystemrelease\"" | "\"parameters\"" | "\"project_page\"" |
	//	"\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\"" | STRING;
	public Q_ReqUnknownKeyElements getQ_ReqUnknownKeyAccess() {
		return (pQ_ReqUnknownKey != null) ? pQ_ReqUnknownKey : (pQ_ReqUnknownKey = new Q_ReqUnknownKeyElements());
	}
	
	public ParserRule getQ_ReqUnknownKeyRule() {
		return getQ_ReqUnknownKeyAccess().getRule();
	}

	/// * Any key literal or a String except the ones listed in OSPair * / Q_OsUnknownKey returns ecore::EString:
	//	"\"author\"" | "\"dependencies\"" | "\"description\"" | "\"license\"" | "\"name\"" | "\"operatingsystem_support\"" |
	//	"\"parameters\"" | "\"project_page\"" | "\"requirements\"" | "\"source\"" | "\"summary\"" | "\"tags\"" | "\"version\""
	//	| "\"version_requirement\"" | STRING;
	public Q_OsUnknownKeyElements getQ_OsUnknownKeyAccess() {
		return (pQ_OsUnknownKey != null) ? pQ_OsUnknownKey : (pQ_OsUnknownKey = new Q_OsUnknownKeyElements());
	}
	
	public ParserRule getQ_OsUnknownKeyRule() {
		return getQ_OsUnknownKeyAccess().getRule();
	}

	//NullValue returns JsonValue:
	//	value=NULL;
	public NullValueElements getNullValueAccess() {
		return (pNullValue != null) ? pNullValue : (pNullValue = new NullValueElements());
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}

	//DoubleLiteral returns JsonValue:
	//	value=DOUBLE;
	public DoubleLiteralElements getDoubleLiteralAccess() {
		return (pDoubleLiteral != null) ? pDoubleLiteral : (pDoubleLiteral = new DoubleLiteralElements());
	}
	
	public ParserRule getDoubleLiteralRule() {
		return getDoubleLiteralAccess().getRule();
	}

	//LongLiteral returns JsonValue:
	//	value=LONG;
	public LongLiteralElements getLongLiteralAccess() {
		return (pLongLiteral != null) ? pLongLiteral : (pLongLiteral = new LongLiteralElements());
	}
	
	public ParserRule getLongLiteralRule() {
		return getLongLiteralAccess().getRule();
	}

	//JsonArray:
	//	{JsonArray} "[" (value+=Value ("," value+=Value)*)? "]";
	public JsonArrayElements getJsonArrayAccess() {
		return (pJsonArray != null) ? pJsonArray : (pJsonArray = new JsonArrayElements());
	}
	
	public ParserRule getJsonArrayRule() {
		return getJsonArrayAccess().getRule();
	}

	//BooleanLiteral returns JsonValue:
	//	value=BOOL;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return (pBooleanLiteral != null) ? pBooleanLiteral : (pBooleanLiteral = new BooleanLiteralElements());
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//BOOL returns ecore::EBooleanObject:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//NULL returns ecore::EJavaObject:
	//	"null";
	public NULLElements getNULLAccess() {
		return (pNULL != null) ? pNULL : (pNULL = new NULLElements());
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal LONG returns ecore::ELongObject:
	//	"-"? DIGIT+;
	public TerminalRule getLONGRule() {
		return (tLONG != null) ? tLONG : (tLONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LONG"));
	} 

	//terminal DOUBLE returns ecore::EDoubleObject:
	//	"-"? DIGIT+ EXPONENT | "-"? DIGIT+ "." DIGIT+ EXPONENT?;
	public TerminalRule getDOUBLERule() {
		return (tDOUBLE != null) ? tDOUBLE : (tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
